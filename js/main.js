function randomNumber (min, max) {
    if (min < 0 || max < 0) {
         return "Минимальное и максимальное число должно быть положительным, включая ноль" 
     } else if (min > max){
       min = (min * max)/(max = min);
     } 
       return Math.floor(min + Math.random() * (max + 1 - min));      
 }


randomNumber (0, 80); 


function floatRandomNumber (min1, max1, floatnum) {
  if (min1 < 0 || max1 < 0 || floatnum < 0) {
       return "Минимальное, максимальное число и количество знаков после запятой должны быть положительным, включая ноль" 
   } else if (min1 > max1){
     min1 = (min1 * max1)/(max1 = min1);
   } 
     return +((Math.floor(min1 + Math.random() * (max1 + 1 - min1))).toFixed(floatnum));     
}


floatRandomNumber (-1, -5, 4); 
//1
//Функция, возвращающая случайное целое число из переданного диапазона включительно. Пример использования функции: имя_функции(от, до); // Результат: целое число из диапазона "от...до" Учтите, что диапазон может быть только положительный, включая ноль. А также придумайте, как функция должна вести себя, если передать значение «до» меньшее, //чем значение «от», или равное ему....
//2
//Функция, возвращающая случайное число с плавающей точкой из переданного диапазона включительно. Будет использоваться для генерации временных географических координат в следующем задании. Пример использования функции: имя_функции(от, до, количество_знаков_после_запятой); // Результат: число с плавающей точкой из диапазона "от...до" с указанным "количеством знаков после запятой" Учтите, что диапазон может быть только положительный, включая ноль. А также придумайте, как функция должна вести себя, если передать значение «до» меньшее, чем значение «от», или равное ему. Не забудьте, что в случае с дробными числами диапазон может быть в десятых, сотых, тысячных и т. д. долях. Например, 1.1, 1.2 — корректный диапазон.
//3
//Функция для проверки максимальной длины строки. Будет использоваться для проверки длины введённого комментария, но должна быть универсальна. Пример использования функции: имя_функции(проверяемая_строка, максимальная_длина); // Результат: true, если строка проходит по длине, и false — если не проходит
//Чтобы ESLint не ругался на неиспользуемые функции, временно вызовите их по одному разу после объявления.
